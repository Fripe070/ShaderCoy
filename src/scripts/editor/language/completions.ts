import { completeFromList } from "@codemirror/autocomplete";
import { glslLanguage } from "./lang";

export const glslCompletion = glslLanguage.data.of({
    autocomplete: completeFromList([
        { label: "void", type: "type" },
        { label: "bool", type: "type" },
        { label: "int", type: "type" },
        { label: "uint", type: "type" },
        { label: "float", type: "type" },
        { label: "vec2", type: "type" },
        { label: "vec3", type: "type" },
        { label: "vec4", type: "type" },
        { label: "bvec2", type: "type" },
        { label: "bvec3", type: "type" },
        { label: "bvec4", type: "type" },
        { label: "ivec2", type: "type" },
        { label: "ivec3", type: "type" },
        { label: "ivec4", type: "type" },
        { label: "uvec2", type: "type" },
        { label: "uvec3", type: "type" },
        { label: "uvec4", type: "type" },
        { label: "mat2", type: "type" },
        { label: "mat3", type: "type" },
        { label: "mat4", type: "type" },
        { label: "mat2x2", type: "type" },
        { label: "mat2x3", type: "type" },
        { label: "mat2x4", type: "type" },
        { label: "mat3x2", type: "type" },
        { label: "mat3x3", type: "type" },
        { label: "mat3x4", type: "type" },
        { label: "mat4x2", type: "type" },
        { label: "mat4x3", type: "type" },
        { label: "mat4x4", type: "type" },
        { label: "sampler2D", type: "type" },
        { label: "sampler3D", type: "type" },
        { label: "samplerCube", type: "type" },
        { label: "samplerCubeShadow", type: "type" },
        { label: "sampler2DShadow", type: "type" },
        { label: "sampler2DArray", type: "type" },
        { label: "sampler2DArrayShadow", type: "type" },
        { label: "isampler2D", type: "type" },
        { label: "isampler3D", type: "type" },
        { label: "isamplerCube", type: "type" },
        { label: "isampler2DArray", type: "type" },
        { label: "usampler2D", type: "type" },
        { label: "usampler3D", type: "type" },
        { label: "usamplerCube", type: "type" },
        { label: "usampler2DArray", type: "type" },

        { label: "const", type: "storage-class" },
        { label: "in", type: "storage-class" },
        { label: "out", type: "storage-class" },
        { label: "centroid", type: "storage-class" },
        { label: "uniform", type: "storage-class" },
        { label: "attribute", type: "storage-class" },
        { label: "varying", type: "storage-class" },
        { label: "layout", type: "storage-class" },
        { label: "precision", type: "storage-class" },
        { label: "invariant", type: "storage-class" },
        { label: "smooth", type: "storage-class" },
        { label: "flat", type: "storage-class" },
        { label: "lowp", type: "storage-class" },
        { label: "mediump", type: "storage-class" },
        { label: "highp", type: "storage-class" },

        { label: "if", type: "keyword" },
        { label: "else", type: "keyword" },
        { label: "switch", type: "keyword" },
        { label: "for", type: "keyword" },
        { label: "while", type: "keyword" },
        { label: "do", type: "keyword" },
        { label: "continue", type: "keyword" },
        { label: "break", type: "keyword" },
        { label: "return", type: "keyword" },
        { label: "discard", type: "keyword" },

        { label: "true", type: "keyword" },
        { label: "false", type: "keyword" },

        { label: "struct", type: "keyword" },
    ]),
});
