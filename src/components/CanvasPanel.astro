---
import "@/styles/tabs.css";

import GLCanvas from "@/components/GLCanvas.astro";
import ModelSelect from "@/components/ModelSelect.astro";
---

<div id="canvas-container">
    <div id="canvasControls" class="tab-bar">
        <button class="tab square" id="pauseButton">
            <span class="material-symbols-outlined pauseIcon">pause</span>
            <span class="material-symbols-outlined playIcon">play_arrow</span>
        </button>
        <span id="performanceArea" class="tab mono">
            <span id="milisecondsValue">0.00</span>ms&nbsp;(<span id="fpsValue">0</span>&nbsp;FPS)
        </span>

        <span class="push-right"></span>
        <ModelSelect />
        <button class="tab square" id="fullscreenButton">
            <span class="material-symbols-outlined">fullscreen</span>
        </button>
    </div>
    <div id="main-canvas-body">
        <!-- TODO: Allow drag and drop model uploads -->
        <GLCanvas />
    </div>
</div>

<script>
    import applicationState from "@/scripts/state";

    const canvasContainer = document.getElementById("main-canvas-body")!;
    const openGLCanvas = applicationState.openGLCanvas;

    const fullscreenButton = document.getElementById("fullscreenButton") as HTMLButtonElement;
    if (document.fullscreenEnabled === false) {
        fullscreenButton.style.display = "none";
    } else {
        fullscreenButton.addEventListener("click", () => {
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
                canvasContainer.requestFullscreen().catch((err) => {
                    console.error("Error attempting to enable full-screen mode:", err);
                });
            }
        });
    }

    const pauseButton = document.getElementById("pauseButton") as HTMLButtonElement;
    pauseButton.onclick = () => {
        const isPaused = pauseButton.classList.toggle("is-paused");
        if (openGLCanvas) openGLCanvas.isPaused = isPaused;
    };
</script>

<style>
    #canvas-container {
        --body-height: calc(var(--canvas-height) - var(--icon-size));

        flex-grow: 1;
        flex-shrink: 1;
    }
    #main-canvas-body {
        height: var(--body-height);
        position: relative;

        background-color: var(--bg-dark);
        background: var(--bg-checkerboard);
        background-position: top right;
    }

    @media screen and (max-width: 850px) {
        #canvas-container {
            height: var(--canvas-height);
            flex-direction: column-reverse;
        }
        #main-canvas-body {
            background-position: bottom right;
        }
    }

    #performanceArea {
        user-select: text;
        #milisecondsValue {
            min-width: 5ch; /* Fixed width for alignment */
            text-align: right; /* Align text to the right */
        }
    }

    #pauseButton {
        > * {
            transition: opacity 0.2s ease-in-out;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
    #pauseButton > .pauseIcon {
        opacity: 1;
    }
    #pauseButton > .playIcon {
        opacity: 0;
    }
    #pauseButton.is-paused > .pauseIcon {
        opacity: 0;
    }
    #pauseButton.is-paused > .playIcon {
        opacity: 1;
    }
    #pauseButton.is-paused {
        background-color: color-mix(in oklab, var(--bg-normal), #f55 20%);
    }
</style>
