---
import "../styles/tabs.css";

type ModelMap = {
    [id: string]: {
        icon_name: string;
        text: string;
    };
};
export const primitiveModels: ModelMap = {
    viewport: { icon_name: "2d", text: "Viewport" },
    cube: { icon_name: "deployed_code", text: "Cube" },
    sphere: { icon_name: "circle", text: "Sphere" },
    torus: { icon_name: "donut_small", text: "Torus" },
    suzanne: { icon_name: "mood", text: "Suzanne" },
};
export const defaultModelIndex = 1;
---

<button id="model-select" class="tab" data-model={Object.keys(primitiveModels)[0]}>
    <span id="model-select-text">
        <span id="model-select-text-inner">
            {primitiveModels[Object.keys(primitiveModels)[defaultModelIndex]].text}
        </span>
    </span>
    <span id="model-select-icon" class="material-symbols-outlined">
        {primitiveModels[Object.keys(primitiveModels)[defaultModelIndex]].icon_name}
    </span>

    <div id="model-select-real" data-primitives={JSON.stringify(primitiveModels)}>
        {
            Object.entries(primitiveModels)
                .filter(([id]) => id !== "custom")
                .map(([id, data]) => (
                    <div
                        id={`model-select-${id}`}
                        class:list={[
                            "row clickable",
                            { selected: id === Object.keys(primitiveModels)[0] },
                        ]}
                    >
                        <span class="square">
                            <span class="icon material-symbols-outlined">{data.icon_name}</span>
                        </span>
                        <span class="text">{data.text}</span>
                    </div>
                ))
        }
        <label for="modelUploadButton" class="row">
            <span class="square">
                <span class="icon material-symbols-outlined">computer_arrow_up</span>
            </span>
            <span class="text">Custom</span>
            <input type="file" id="modelUploadButton" accept=".obj,.glb,.gltf" />
        </label>
    </div>
</button>

<script>
    const primitiveModels = JSON.parse(
        document.getElementById("model-select-real")?.dataset.primitives || "{}",
    );

    const modelSelectButton = document.getElementById("model-select")!;
    const modelSelectText = document.getElementById("model-select-text-inner")!;
    const iconElement = document.getElementById("model-select-icon")!;

    const rows = document.querySelectorAll("#model-select-real > .row.clickable");
    rows.forEach((row) => {
        row.addEventListener("click", () => {
            const modelId = row.id.replace(/^model-select-/, "");
            console.log(`Selected model: ${modelId}`);
            const modelData = primitiveModels[modelId];
            if (!modelData) return;
            modelSelectButton.dataset.model = modelId;
            iconElement.textContent = modelData.icon_name;
            modelSelectText.textContent = modelData.text;
            rows.forEach((r) => {
                r.classList.remove("selected");
                if (r.id === row.id) {
                    r.classList.add("selected");
                }
            });
            // TODO: Signal
        });
    });

    const modelUploadButton = document.getElementById("modelUploadButton") as HTMLInputElement;
    modelUploadButton.onchange = (event) => {
        modelSelectButton.dataset.model = "custom";
        iconElement.textContent = "computer_arrow_up";
        modelSelectText.textContent = "Custom"; // Will be changed to the model filename later
        rows.forEach((r) => {
            r.classList.remove("selected");
            if (r.id === modelUploadButton.id) {
                r.classList.add("selected");
            }
        });

        // Handle upload
        const inputElem = event.target as HTMLInputElement | null;
        if (!inputElem?.files?.length) return;
        const file = inputElem.files[0];
        // Load file content into the editor
        const reader = new FileReader();
        reader.onload = () => {
            // TODO: Load the model into the canvas. Needs to work for both text and binary formats
            const modelData = reader.result;
            console.log("Model data loaded:", modelData);
            // TODO: Signal
        };
        reader.readAsText(file);
    };
</script>

<style>
    #model-select {
        --expanded-width: 7em;
        --animation-duration-vertical: 150ms;
        --animation-duration-horizontal: 50ms;
        --fill-animation-duration: 100ms;

        position: relative;

        display: flex;
        align-items: center;
        justify-content: space-between;

        padding: calc(var(--tab-height) / 2 - 12px);
        box-sizing: border-box;

        width: var(--tab-height);
        transition: width var(--animation-duration-horizontal) ease-in-out;
    }
    #model-select-text {
        overflow: hidden;
        > span {
            padding-right: 4px;
        }
    }
    #model-select:hover,
    #model-select:focus-within {
        width: var(--expanded-width);
        background: var(--bg-normal-hover);

        > #model-select-text {
            max-width: var(--expanded-width);
        }
        > #model-select-real {
            transform: scaleY(1);
            width: var(--expanded-width);
        }
    }

    #model-select-real {
        z-index: 1;
        position: absolute;
        top: 100%;
        right: 0;

        width: var(--tab-height);
        transform: scaleY(0);
        transform-origin: top;
        transition:
            transform var(--animation-duration-vertical) ease-in-out,
            width var(--animation-duration-horizontal) ease-in-out;

        background: var(--bg-normal);
        color: var(--text);

        display: flex;
        flex-direction: column;

        > .row {
            text-wrap: nowrap;
            cursor: pointer;

            display: flex;
            flex-direction: row-reverse;
            justify-content: space-between;
            align-items: center;

            > .text {
                flex-shrink: 1;
                flex-grow: 1;
                padding-left: 4px;
                overflow: hidden;
            }
            > .square {
                flex-grow: 0;
                flex-shrink: 0;
            }
            &:nth-child(odd) {
                background: var(--bg-light);
            }
            input[type="file"] {
                display: none;
            }

            &:hover {
                background: var(--bg-normal-hover);
            }
            &:not(.selected) .icon {
                transition: font-variation-settings var(--fill-animation-duration) ease-in-out;
                font-variation-settings: "FILL" 0;
            }
            &:hover .icon {
                font-variation-settings: "FILL" 1;
            }
        }
    }
</style>
