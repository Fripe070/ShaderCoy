---
import { Icon } from "astro-icon/components";
import template from "@/assets/images/pwa_icon.png";
---

<template id="texture-card-template">
    <div class="texture-card flex flex-col items-center p-2 gap-2 bg-od-dark relative">
        <div class="w-50 h-50 flex items-center justify-center checkerboard">
            <img
                src={template.src}
                alt="Texture Preview"
                class:list={["texture-image", "object-contain w-full h-full"]}
                draggable="false"
            />
        </div>
        <div class="flex flex-row w-full justify-between gap-2">
            <button
                class:list={[
                    "push-left-button toggleable-button",
                    "w-7 h-7 bg-od-light hover:bg-od-selected",
                    "disabled:bg-od-light/50 disabled:cursor-not-allowed",
                    "flex flex-row justify-center items-center",
                ]}
                title="Move Left"
            >
                <Icon name="material-symbols:arrow-back" size={24} />
            </button>
            <button
                class:list={[
                    "edit-button",
                    "grow h-7 bg-od-light hover:bg-od-selected",
                    "flex flex-row justify-center items-center gap-2",
                ]}
                title="Edit Texture"
            >
                <Icon name="material-symbols:edit" size={20} />
                Edit
            </button>
            <button
                class:list={[
                    "push-right-button toggleable-button",
                    "w-7 h-7 bg-od-light hover:bg-od-selected",
                    "disabled:bg-od-light/50 disabled:cursor-not-allowed",
                    "flex flex-row justify-center items-center",
                ]}
                title="Move Right"
            >
                <Icon name="material-symbols:arrow-forward" size={24} />
            </button>
        </div>
        <button
            class:list={[
                "delete-button",
                "absolute top-0 right-0 w-7 h-7 bg-rose-900/80 hover:bg-rose-700",
                "flex flex-row justify-center items-center",
            ]}
            title="Remove Texture"
        >
            <Icon name="material-symbols:delete" size={20} />
        </button>
    </div>
</template>

<div
    id="texture-container"
    class:list={[
        "h-full",
        "data-[dragover=true]:bg-od-accent/10",
        "border-4 border-dashed border-transparent",
        "data-[dragover=true]:border-od-accent",
        "data-[dragover=true]:border-animate-pulse",
    ]}
>
    <div
        id="texture-grid"
        class:list={[
            "flex flex-row justify-center items-start flex-wrap gap-4 p-4 overflow-y-auto",
            "[&:has(>:only-child)]:h-full",
            "[&:has(>:only-child)]:items-center",
        ]}
    >
        <label
            class="p-2 gap-2 flex flex-col items-center bg-od-dark group cursor-pointer hover:bg-od-light"
            for="textureUploadButton"
            id="add-texture-card"
        >
            <input
                class="hidden"
                id="textureUploadButton"
                type="file"
                accept="image/png,image/jpeg"
                multiple
            />
            <div
                class="w-50 h-50 flex items-center justify-center bg-od-normal group-hover:bg-od-selected"
            >
                <Icon name="material-symbols:add-photo-alternate" size={64} />
            </div>
            <div class="h-7 flex flex-row justify-center items-center gap-2 text-xl">
                Add Texture
            </div>
        </label>
    </div>
</div>

<script>
    import type { TextureData } from "@/scripts/resources/texture/datatypes";
    import { loadTexture2D } from "@/scripts/resources/texture/load";
    import appState from "@/scripts/state";

    const cardTemplate = document.getElementById("texture-card-template") as HTMLTemplateElement;
    if (!cardTemplate) throw new Error("Texture card template not found");
    const container = document.getElementById("texture-container");
    if (!container) throw new Error("Texture container not found");
    const grid = document.getElementById("texture-grid");
    if (!grid) throw new Error("Texture grid not found");
    const addTextureCard = document.getElementById("add-texture-card");
    if (!addTextureCard) throw new Error("Add texture card not found");
    const fileInput = document.getElementById("textureUploadButton") as HTMLInputElement;
    if (!fileInput) throw new Error("File input not found");

    const canvas = appState.canvas3D;
    if (!canvas) throw new Error("Canvas3D not found");
    const maxTextures = canvas.glCtx.getParameter(canvas.glCtx.MAX_TEXTURE_IMAGE_UNITS) ?? 0;
    const loadedTexturesStore = canvas.state.$loadedTextures;

    // Drag and drop functionality
    container.addEventListener("dragover", (event) => {
        event.preventDefault();
        container.dataset.dragover = "true";
    });
    container.addEventListener("dragleave", (event) => {
        event.preventDefault();
        container.dataset.dragover = "false";
    });
    container.addEventListener("drop", (event) => {
        event.preventDefault();
        container.dataset.dragover = "false";
        if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
            addTextures(event.dataTransfer.files);
        }
    });
    // File input functionality
    fileInput.addEventListener("change", (event) => {
        const target = event.target as HTMLInputElement;
        if (target.files && target.files.length > 0) {
            addTextures(target.files);
        }
        target.value = ""; // Clear the input
    });

    function addTextures(files: FileList) {
        if (!canvas) throw new Error("Canvas3D not found");

        const promises: Promise<TextureData>[] = [];
        for (const file of files) {
            promises.push(
                new Promise((resolve, reject) => {
                    const image = new Image();
                    image.onload = () => {
                        const texture = loadTexture2D(canvas.glCtx, image);
                        resolve(texture);
                    };
                    image.onerror = (error) => reject(error);
                    image.src = URL.createObjectURL(file);
                }),
            );
        }
        Promise.allSettled(promises)
            .then((results) => {
                const fulfilledFilter = (r: PromiseSettledResult<TextureData>) =>
                    r.status === "fulfilled";

                results.filter((r) => !fulfilledFilter(r)).forEach((r) => console.error(r.reason));

                const textures = results
                    .filter(fulfilledFilter)
                    .slice(0, maxTextures - loadedTexturesStore.get().length)
                    .map((r) => r.value);

                if (textures.length < results.filter(fulfilledFilter).length) {
                    console.warn("Max texture limit reached. Some textures were not added.");
                }
                loadedTexturesStore.set([...loadedTexturesStore.get(), ...textures]);
            })
            .catch((error) => console.error(error));
    }

    loadedTexturesStore.subscribe((textures) => {
        grid.replaceChildren(
            ...textures.map((texture, index) => {
                const card = cardTemplate.content.cloneNode(true) as HTMLElement;
                const img = card.querySelector(".texture-image") as HTMLImageElement;
                if (img) img.src = texture.imageUri;

                const deleteButton = card.querySelector(".delete-button") as HTMLButtonElement;
                const editButton = card.querySelector(".edit-button") as HTMLButtonElement;

                const leftButton = card.querySelector(".push-left-button") as HTMLButtonElement;
                const rightButton = card.querySelector(".push-right-button") as HTMLButtonElement;
                leftButton.disabled = index === 0;
                rightButton.disabled = index === textures.length - 1;

                deleteButton.addEventListener("click", () => {
                    canvas.glCtx.deleteTexture(texture.glTexture);
                    URL.revokeObjectURL(texture.imageUri);
                    loadedTexturesStore.set(
                        loadedTexturesStore.get().filter((_, i) => i !== index),
                    );
                });
                img.addEventListener("click", () => {
                    alert("Texture preview not implemented yet.");
                });
                editButton.addEventListener("click", () => {
                    alert("texture editing not implemented yet.");
                });
                leftButton.addEventListener("click", () => {
                    if (index <= 0) return;
                    const newTextures = [...loadedTexturesStore.get()];
                    [newTextures[index - 1], newTextures[index]] = [
                        newTextures[index]!,
                        newTextures[index - 1]!,
                    ];
                    loadedTexturesStore.set(newTextures);
                });
                rightButton.addEventListener("click", () => {
                    if (index >= textures.length - 1) return;
                    const newTextures = [...loadedTexturesStore.get()];
                    [newTextures[index + 1], newTextures[index]] = [
                        newTextures[index]!,
                        newTextures[index + 1]!,
                    ];
                    loadedTexturesStore.set(newTextures);
                });

                return card;
            }),
            addTextureCard,
        );
    });
</script>
