---
import "../styles/tabs.css";
---

<div id="textures-panel">
    <div id="textures-grid">
        <label for="textureUploadButton" id="upload-card">
            <input type="file" id="textureUploadButton" accept="image/png,image/jpeg" multiple />
            <span class="icon material-symbols-outlined">add_photo_alternate</span>
            <p>Upload Texture</p>
            <p><span id="grid-loaded-textures">?</span>/<span id="grid-max-textures">?</span></p>
        </label>
    </div>

    <template>
        <div class="card">
            <div class="card-preview">
                <!-- TODO: Set CSS image-rendering based on filter mode -->
                <img class="texture-image" src="" alt="Texture Preview" />

                <span class="card-index">N/A</span>
                <button class="card-delete square">
                    <span class="material-symbols-outlined">delete</span>
                </button>
            </div>
            <div class="card-footer">
                <button class="square card-arrow arrow-left">
                    <span class="material-symbols-outlined">arrow_back</span>
                </button>
                <button class="card-edit">
                    <span class="material-symbols-outlined">edit</span>
                    <span>Edit</span>
                </button>
                <button class="square card-arrow arrow-right">
                    <span class="material-symbols-outlined">arrow_forward</span>
                </button>
            </div>
        </div>
    </template>

    <dialog id="texture-preview-dialog" closedby="any">
        <div class="tab-bar">
            <span class="push-right"></span>
            <form method="dialog">
                <button type="submit">
                    <span class="material-symbols-outlined">close</span>
                </button>
            </form>
        </div>
        <div class="dialog-body">
            <img class="dialog-image" src="" alt="Texture Preview" />
        </div>
    </dialog>
</div>

<script>
    import { loadTexture2D } from "../scripts/3d/texture";
    import applicationState from "../scripts/state";

    const panel = document.getElementById("textures-panel") as HTMLElement;
    const grid = document.getElementById("textures-grid") as HTMLElement;
    const cardTemplate = document.querySelector("template") as HTMLTemplateElement;
    const uploadCard = document.getElementById("upload-card") as HTMLElement;
    const uploadButton = document.getElementById("textureUploadButton") as HTMLInputElement;
    const previewDialog = document.getElementById("texture-preview-dialog") as HTMLDialogElement;
    const previewDialogImage = previewDialog.querySelector(".dialog-image") as HTMLImageElement;

    const loadedTextureCounter = document.getElementById("grid-loaded-textures") as HTMLElement;
    const maxTextureCounter = document.getElementById("grid-max-textures") as HTMLElement;

    const glCanvas = applicationState.openGLCanvas;
    if (!glCanvas) throw new Error("No OpenGL context available");
    const glCtx = glCanvas.gl;
    const maxFragTextures = glCtx.getParameter(glCtx.MAX_TEXTURE_IMAGE_UNITS) ?? 0;

    panel.addEventListener("dragover", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", true);
    });
    panel.addEventListener("dragleave", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", false);
    });
    panel.addEventListener("drop", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", false);
        if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
            addTextures(event.dataTransfer.files);
        }
    });
    uploadButton.addEventListener("change", () => {
        if (uploadButton.files && uploadButton.files.length > 0) {
            addTextures(uploadButton.files);
            uploadButton.value = "";
        }
    });

    type LoadedTexture = {
        imageUri: string;
        glTexture: WebGLTexture;
    };
    const textures: LoadedTexture[] = [];

    function addTextures(files: FileList) {
        panel.classList.toggle("loading", true);

        const promises: Promise<LoadedTexture>[] = [];
        for (const file of files) {
            if (textures.length + promises.length >= maxFragTextures) {
                console.warn(
                    `Maximum of ${maxFragTextures} textures reached, skipping: ${file.name}`,
                );
                continue;
            }
            promises.push(
                new Promise((resolve, reject) => {
                    const image = new Image();
                    image.onload = () => {
                        const glTexture = loadTexture2D(glCtx, image);
                        const texture: LoadedTexture = {
                            imageUri: image.src,
                            glTexture: glTexture,
                        };
                        textures.push(texture);
                        resolve(texture);
                    };
                    image.onerror = (error) => reject(error);
                    image.src = URL.createObjectURL(file);
                }),
            );
        }
        Promise.allSettled(promises)
            .then((results) => {
                results
                    .filter((result) => result.status !== "fulfilled")
                    .forEach((result) => console.error(result.reason));
            })
            .catch((error) => console.error(error))
            .finally(() => {
                panel.classList.toggle("loading", false);
                repaintTextureGrid();
            });
    }

    function repaintTextureGrid() {
        const newUrls: string[] = textures.map((texture) => texture.imageUri);
        const oldUrls: string[] = Array.from(
            grid.querySelectorAll<HTMLImageElement>(".texture-image"),
            (image) => image.src,
        );
        if (newUrls.join() !== oldUrls.join()) {
            console.debug("Texture order changed, rebinding textures.");
            glCanvas!.setTextures(textures.map((texture) => texture.glTexture));
        }

        grid.replaceChildren(
            ...textures.map((texture, index) => {
                const card = cardTemplate.content.cloneNode(true) as HTMLElement;
                card.querySelector(".card-index")!.textContent = index.toString();

                const textureImage = card.querySelector(".texture-image") as HTMLImageElement;
                textureImage.src = texture.imageUri;
                textureImage.alt = `Preview of texture ${index + 1}`;

                textureImage.addEventListener("click", () => {
                    previewDialogImage.src = texture.imageUri;
                    previewDialog.showModal();
                });

                const deleteButton = card.querySelector(".card-delete") as HTMLButtonElement;
                deleteButton.addEventListener("click", () => {
                    textures.splice(index, 1);
                    URL.revokeObjectURL(texture.imageUri);
                    glCtx.deleteTexture(texture.glTexture);
                    repaintTextureGrid();
                });

                const arrowLeftButton = card.querySelector(
                    ".card-arrow.arrow-left",
                ) as HTMLButtonElement;
                arrowLeftButton.disabled = index === 0;
                arrowLeftButton.addEventListener("click", () => {
                    [textures[index - 1], textures[index]] = [textures[index], textures[index - 1]];
                    repaintTextureGrid();
                });

                const arrowRightButton = card.querySelector(
                    ".card-arrow.arrow-right",
                ) as HTMLButtonElement;
                arrowRightButton.disabled = index === textures.length - 1;
                arrowRightButton.addEventListener("click", () => {
                    [textures[index], textures[index + 1]] = [textures[index + 1], textures[index]];
                    repaintTextureGrid();
                });

                return card;
            }),
            uploadCard,
        );

        uploadCard.style.display = maxFragTextures > textures.length ? "flex" : "none";
        loadedTextureCounter.textContent = textures.length.toString();
        maxTextureCounter.textContent = maxFragTextures.toString();
    }

    repaintTextureGrid();
</script>

<style>
    #textures-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow-y: auto;

        transition: backdrop-filter 0.2s;

        position: relative;
        z-index: 1;

        --card-width: 180px;
    }

    #textures-grid {
        z-index: -1;
        position: relative;

        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;

        gap: var(--standard-spacing);
        padding: var(--standard-spacing);
    }

    #textures-panel.dragover {
        backdrop-filter: brightness(0.9);
        outline: 2px dashed var(--text-muted);
        outline-offset: -2px;
    }
    #textures-panel.loading {
        filter: brightness(0.85);
        backdrop-filter: brightness(0.85);
        pointer-events: none;
        &::after {
            content: "Loading...";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }

    #upload-card {
        width: var(--card-width);
        height: calc(var(--card-width) + var(--icon-size));

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: var(--bg-dark);

        padding: var(--standard-spacing);
        user-select: none;
        cursor: pointer;

        color: var(--text-muted);
        --border-width: 4px;
        outline: var(--border-width) dashed var(--bg-light);
        outline-offset: calc(-1 * var(--border-width));

        > .icon {
            font-size: 5em;
        }
        > input[type="file"] {
            display: none;
        }
    }

    .card {
        display: flex;
        flex-direction: column;

        background: var(--bg-dark);
        width: var(--card-width);

        user-select: none;
    }
    .card-preview {
        position: relative;
        background: var(--bg-checkerboard);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        height: var(--card-width);

        > .texture-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            cursor: zoom-in;
        }
        > .card-index {
            user-select: text;

            position: absolute;
            top: 0;
            left: 0;

            background: var(--bg-light);
            font-weight: 700;
            font-size: 1.5em;

            display: flex;
            align-items: center;
            justify-content: center;

            min-width: var(--icon-size);
            height: var(--icon-size);

            padding: 0 0.25ch;
            box-sizing: border-box;
        }
        > .card-delete {
            position: absolute;
            top: 0;
            right: 0;

            background: var(--col-red);
            color: var(--bg-dark);
        }
    }

    .card-footer {
        height: var(--icon-size);
        display: flex;
        flex-direction: row;

        font-weight: bold;
        > .card-edit {
            flex-grow: 1;
            height: var(--icon-size);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: calc(var(--icon-margin) * 2);
            padding: 0 var(--icon-margin);
            background: var(--bg-dark);
        }
    }

    #texture-preview-dialog {
        border: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: min(100vw, 800px);
        height: min(100svh, 1000px);

        background: var(--bg-checkerboard);
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);

        &[open] {
            display: flex;
            flex-direction: column;
        }
        &::backdrop {
            backdrop-filter: blur(5px) brightness(0.6);
        }

        .dialog-body {
            flex-grow: 1;
            height: calc(100% - var(--icon-size));

            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .dialog-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
    }
</style>
