---
import "../styles/tabs.css";
---

<div id="textures-panel">
    <div id="textures-grid">
        <label for="textureUploadButton" id="upload-card">
            <input type="file" id="textureUploadButton" accept="image/*" multiple />
            <span class="icon material-symbols-outlined">add_photo_alternate</span>
            <span>Upload Texture</span>
        </label>
    </div>

    <template>
        <div class="card">
            <div class="card-preview">
                <!-- TODO: Set CSS image-rendering based on filter mode -->
                <img
                    class="texture-image"
                    src="https://placehold.co/40x60.png"
                    alt="Texture Preview"
                />

                <span class="card-index">N/A</span>
                <button class="card-delete square">
                    <span class="material-symbols-outlined">delete</span>
                </button>
            </div>
            <div class="card-footer">
                <button class="square card-arrow arrow-left">
                    <span class="material-symbols-outlined">arrow_back</span>
                </button>
                <button class="card-edit">
                    <span class="material-symbols-outlined">edit</span>
                    <span>Edit</span>
                </button>
                <button class="square card-arrow arrow-right">
                    <span class="material-symbols-outlined">arrow_forward</span>
                </button>
            </div>
        </div>
    </template>
</div>

<script>
    const panel = document.getElementById("textures-panel") as HTMLElement;
    const grid = document.getElementById("textures-grid") as HTMLElement;
    const cardTemplate = document.querySelector("template") as HTMLTemplateElement;
    const uploadCard = document.getElementById("upload-card") as HTMLElement;
    const uploadButton = document.getElementById("textureUploadButton") as HTMLInputElement;

    panel.addEventListener("dragover", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", true);
    });
    panel.addEventListener("dragleave", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", false);
    });
    panel.addEventListener("drop", (event) => {
        event.preventDefault();
        panel.classList.toggle("dragover", false);
        if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
            for (const file of event.dataTransfer.files) {
                if (file.type.startsWith("image/")) {
                    addTextureCard(file);
                }
            }
        }
    });
    uploadButton.addEventListener("change", () => {
        if (uploadButton.files && uploadButton.files.length > 0) {
            for (const file of uploadButton.files) addTextureCard(file);
        }
    });

    type Texture = {
        file: File;
        previewUri: string;
    };
    const textures: Texture[] = [];

    function addTextureCard(file: File) {
        textures.push({
            file,
            previewUri: URL.createObjectURL(file),
        });
        repaintTextureGrid();
    }

    function repaintTextureGrid() {
        grid.replaceChildren(
            ...textures.map((texture, index) => {
                const card = cardTemplate.content.cloneNode(true) as HTMLElement;
                card.querySelector(".card-index")!.textContent = index.toString();

                const textureImage = card.querySelector(".texture-image") as HTMLImageElement;
                textureImage.src = texture.previewUri;
                textureImage.alt = `Preview of texture ${index + 1}: ${texture.file.name}`;

                const deleteBtn = card.querySelector(".card-delete") as HTMLButtonElement;
                deleteBtn.addEventListener("click", () => {
                    textures.splice(index, 1);
                    URL.revokeObjectURL(texture.previewUri);
                    grid.removeChild(grid.children[index]);
                    repaintTextureGrid();
                });

                return card;
            }),
            uploadCard,
        );
    }
</script>

<style>
    #textures-panel {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow-y: auto;

        transition: backdrop-filter 0.2s;

        position: relative;
        z-index: 1;

        --card-width: 180px;
    }

    #textures-grid {
        z-index: -1;

        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;

        gap: var(--standard-spacing);
        padding: var(--standard-spacing);
    }

    #textures-panel.dragover {
        backdrop-filter: brightness(0.9);
        outline: 2px dashed var(--text-muted);
        outline-offset: -2px;
    }

    #upload-card {
        width: var(--card-width);
        height: calc(var(--card-width) + var(--icon-size));

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: var(--bg-dark);

        padding: var(--standard-spacing);
        user-select: none;
        cursor: pointer;

        color: var(--text-muted);
        --border-width: 4px;
        outline: var(--border-width) dashed var(--bg-light);
        outline-offset: calc(-1 * var(--border-width));

        > .icon {
            font-size: 5em;
        }
        > input[type="file"] {
            display: none;
        }
    }

    .card {
        display: flex;
        flex-direction: column;

        background: var(--bg-dark);
        width: var(--card-width);

        user-select: none;
    }
    .card-preview {
        position: relative;
        background: var(--bg-checkerboard);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        height: var(--card-width);

        > .texture-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            cursor: zoom-in;
        }
        > .card-index {
            user-select: text;

            position: absolute;
            top: 0;
            left: 0;

            background: var(--bg-light);
            font-weight: 700;
            font-size: 1.5em;

            display: flex;
            align-items: center;
            justify-content: center;

            min-width: var(--icon-size);
            height: var(--icon-size);

            padding: 0 0.25ch;
            box-sizing: border-box;
        }
        > .card-delete {
            position: absolute;
            top: 0;
            right: 0;

            background: var(--col-red);
            color: var(--bg-dark);
        }
    }

    .card-footer {
        height: var(--icon-size);
        display: flex;
        flex-direction: row;

        font-weight: bold;
        > .card-edit {
            flex-grow: 1;
            height: var(--icon-size);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: calc(var(--icon-margin) * 2);
            padding: 0 var(--icon-margin);
            background: var(--bg-dark);
        }
    }
</style>
