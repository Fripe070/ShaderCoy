---
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>ShaderCoy</title>

		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:FILL@1" />
	</head>
	<body>
		<main id="app"> <!-- TODO: allow toggling class="reversed" in settings --> 
			<div id="canvasContainer">
				<div id="canvasControls" class="tab-bar">
					<button class="tab square material-symbols-outlined" id="pauseButton">pause</button>
					<span id="performanceArea" class="tab mono">
						<span id="milisecondsValue">0.00</span>ms&nbsp;(<span id="fpsValue">0</span>&nbsp;FPS)
					</span>
					<span class="push-right" /> <!-- Push following buttons to the right -->
					<button class="tab square material-symbols-outlined" id="fullscreenButton">fullscreen</button>
					<script>
						if (document.fullscreenEnabled === false) {
							document.getElementById("fullscreenButton")?.classList.add("disabled");
						}
					</script>
				</div>
				<canvas id="mainCanvas" />
			</div>
			<div id="sidebar">
				<div class="tab-bar">
					<button class="tab active">Editor</button>
					<button class="tab square push-right">
						<span id="settingsButton" class="material-symbols-outlined">settings</span>
					</button>
				</div>
				<div id="editor-container" />
			</div>
		</main>

		<dialog id="settingsModal" closedby="any">
			<div>
				<h2>Settings</h2>
				<p>:3</p>
				<form method="dialog">
					<button type="submit">Close</button>
				</form>
			</div>
		</dialog>
	</body>
</html>

<script>
	import { EditorView, keymap } from "@codemirror/view";
	import { EditorState, Compartment } from "@codemirror/state";
	import { indentUnit, syntaxHighlighting } from "@codemirror/language";
	import { indentWithTab, redo } from "@codemirror/commands";
	import { oneDarkHighlightStyle, oneDarkTheme } from "@codemirror/theme-one-dark";
	import { basicSetup } from "codemirror";
	import { glsl } from "codemirror-lang-glsl";

	const themeCompartment = new Compartment();
	const tabSizeCompartment = new Compartment();
	const lineWrappingCompartment = new Compartment();

	const state = EditorState.create({
		doc: "totes real glsl code :3c\n\nbeep boop\n",
		extensions: [
			basicSetup,
			glsl(),
			keymap.of([
				indentWithTab,
			    { key: "Mod-Shift-z", run: redo, preventDefault: true },
			]),

			themeCompartment.of([oneDarkTheme, syntaxHighlighting(oneDarkHighlightStyle)]),
			tabSizeCompartment.of(indentUnit.of(" ".repeat(4))),
			lineWrappingCompartment.of([]), // No wrapping by default
			// TODO: Style search/replace
		]
	});

	const editorContainer = document.getElementById("editor-container")!;
	const view = new EditorView({
		state,
		parent: editorContainer,
	});

	const canvas = document.getElementById("mainCanvas") as HTMLCanvasElement;

	const settingsButton = document.getElementById("settingsButton") as HTMLButtonElement;
	const settingsModal = document.getElementById("settingsModal") as HTMLDialogElement;
	settingsButton.onclick = () => {
		settingsModal.open ? settingsModal.close() : settingsModal.showModal();
	};

	view.dispatch({
		// Toggle line wrapping
		effects: lineWrappingCompartment.reconfigure(
			lineWrappingCompartment.get(state) === EditorView.lineWrapping ? [] : [EditorView.lineWrapping]
		)
	});

	document.getElementById("fullscreenButton")!.onclick = () => {
		document.fullscreenElement ? document.exitFullscreen() : canvas.requestFullscreen();
	};
</script>

<style>
	#app {
		display: flex;
		flex-direction: row;
		width: 100%;
		height: 100%;
		min-height: 100%;
	}
	#app.reversed {
		flex-direction: row-reverse;
	}

	#canvasContainer {
		flex-grow: 1;
		flex-shrink: 1;
		display: flex;
		flex-direction: column;
	}
	#mainCanvas {
		background: repeating-conic-gradient(var(--bg-dark) 0 25%, var(--bg-normal) 0 50%) 50% / 20px 20px; /* One Dark */
		background-color: var(--bg-dark);
		background-position: top right;

		display: block;
		flex-grow: 1;
		flex-shrink: 1;
	}
	#canvasControls {
		display: flex;
		flex-direction: row;
		align-items: center;
		
		#milisecondsValue {
			min-width: 5ch; /* Fixed width for alignment */
			text-align: right; /* Align text to the right */
		}
		#performanceArea {
			user-select: text;
		}
	}

	#sidebar {
		flex-grow: 0
		flex-shrink: 0;
		display: flex;
		flex-direction: column;
		width: 600px;
		border-left: 1px solid var(--bg-dark);
	}
	#editor-container {
		flex-grow: 1;
		flex-shrink: 1;
		background: var(--bg-normal); /* Can be briefly visible before the editor is fully populated */
		
		.cm-editor {
			height: 100%;
			max-height: 100%;
		}
		.cm-scroller {
			overflow: auto;
		}
		.cm-content {
			padding-bottom: 4em; /* I prefer having the last line not be at the absolute bottom of my monitor */
		}
	}
	.tab-bar {
		background-color: var(--bg-dark);
		display: flex;
		flex-direction: row;
		align-items: center;
		height: 30px;
	}

	.tab {
		height: 100%;
		padding: 0 10px;
		user-select: none;

		display: flex;
		align-items: center;
		justify-content: center;

		&:is(button) {
			font-weight: bold;
			background-color: var(--bg-normal);
			&:hover {
				background-color: var(--bg-normal-hover);
			}
		}
	}

	.tab.square {
		padding: 0 5px;
	}
	.push-right {
		margin-left: auto;
	}
	.disabled {
		opacity: 0.5;
		pointer-events: none;
		background-color: #f003 !important;
		color: #f00a !important;
	}

	#settingsModal {
		display: fixed;
		top: 15px;
		left: 50%;
		transform: translateX(-50%);

		width: calc(600px - 60px);
		padding: 10px;

		color: var(--text);
		background: var(--bg-normal);
		border: none;
		border-radius: 8px;

		&::backdrop {
			background: rgba(0, 0, 0, 0.5);
		}
		> div {
			display: flex;
			flex-direction: column;
			gap: 5px;
		}
	}

	@media screen and (max-width: 800px) {
		#app, #app.reversed {
			flex-direction: column;
		}
		#canvasContainer {
			flex-grow: 0;
			flex-shrink: 1;
			flex-basis: 100vw;
			flex-direction: column-reverse;
		}
		#mainCanvas {
			background-position: bottom right;
		}
		#sidebar {
			width: 100%;
			flex-grow: 1;
			flex-shrink: 0;
			min-height: 300px;
			border-left: none;
		}
		#settingsModal {
			width: calc(100% - 30px);
		}
	}
</style>

<style is:global>
	@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital@0;1&display=swap');

	:root {
		--bg-dark:   hsl(216, 13%, 15%);
		--bg-normal: hsl(220, 13%, 18%);
		--bg-light:  hsl(220, 13%, 23%);

		--text: hsl(220.01, 13%, 66%);

		--bg-normal-hover: color-mix(in oklch, var(--bg-normal), var(--bg-light));
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	html, body {
		width: 100%;
		height: 100%;
	}
	.sans-serif, body {
		font-family: 'Roboto', sans-serif;
		color: var(--text);
	}

	.cm-editor * {
		font-size: 13px;
		line-height: 1.2;
		&, .mono {
			font-family: "JetBrains Mono", monospace;
			font-variant-ligatures: normal;
		}
	}

	button {
		all: unset;
		cursor: pointer;
		background: var(--bg-light);
	}
</style>

