---
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>ShaderCoy</title>

		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=settings" />
	</head>
	<body>
		<main id="app">
			<div id="canvasContainer">
				<canvas id="mainCanvas" />
			</div>
			<div id="sidebar">
				<div class="tab-bar">
					<button class="tab active">Editor</button>
					<button class="tab settings">
						<span class="material-symbols-outlined">settings</span>
					</button>
				</div>
				<div id="editor-container" />
			</div>
		</main>

		<dialog id="settingsModal" closedby="any">
			<div>
				<h2>Settings</h2>
				<p>:3</p>
				<form method="dialog">
					<button type="submit">Close</button>
				</form>
			</div>
		</dialog>
	</body>
</html>

<script>
	import { EditorView, keymap } from "@codemirror/view"
	import { indentUnit, syntaxHighlighting } from "@codemirror/language"
	import { indentWithTab } from "@codemirror/commands"
	import { oneDarkHighlightStyle, oneDarkTheme } from "@codemirror/theme-one-dark"
	import { basicSetup } from "codemirror"
	import {EditorState, Compartment} from "@codemirror/state"

	const themeCompartment = new Compartment()
	const tabSizeCompartment = new Compartment()
	const lineWrappingCompartment = new Compartment()

	const state = EditorState.create({
		doc: "a != b\nHI GOOBERS I AM TESTING MY APP (why in uppercase? idk) AND THIS IS MEANT TO BE A REALLY LONG LINE SO I CAN TEST WRAPPING!!!! (and stuff like that)\nBOOM!! NEW LINE! Exciting, right?\n\nThis is a new paragraph, with some more text to test the editor's capabilities. Let's see how it handles this!\n\nAnd another line to make sure we have enough content to scroll through.\n\nAnd one more line for good measure.\n\nAnd another one, just to be sure that we have enough content to test the scrolling and wrapping features of the editor.\n\n\n\n\n\n\n\n\n\n",
		extensions: [
			basicSetup,
			keymap.of([
				indentWithTab,
			]),

			themeCompartment.of([oneDarkTheme, syntaxHighlighting(oneDarkHighlightStyle)]),
			tabSizeCompartment.of(indentUnit.of(" ".repeat(4))),
			lineWrappingCompartment.of([]), // No wrapping by default
		]
	})
	const view = new EditorView({
		state,
		parent: document.querySelector("#editor-container")!,
	})


	const settingsButton: HTMLButtonElement = document.querySelector(".tab.settings")!;
	const settingsModal = document.getElementById("settingsModal") as HTMLDialogElement;
	settingsButton.onclick = () => {
		settingsModal.open ? settingsModal.close() : settingsModal.showModal();
	};

</script>


<style>
	#app {
		display: flex;
		flex-direction: row;
		width: 100%;
		height: 100%;
		min-height: 100%;
	}
	#canvasContainer {
		flex-grow: 1;
		flex-shrink: 1;
		background: repeating-conic-gradient(var(--bg-dark) 0 25%, var(--bg-normal) 0 50%) 50% / 20px 20px; /* One Dark */
		background-color: var(--bg-dark);
		background-position: top right;
	}
	#mainCanvas {
		width: 100%;
		height: 100%;
		display: block;
	}
	#sidebar {
		flex-grow: 0
		flex-shrink: 0;
		display: flex;
		flex-direction: column;
		width: 600px;
	}
	#editor-container {
		flex-grow: 1;
		flex-shrink: 1;
		
		.cm-editor {
			height: 100%;
			max-height: 100%;
		}
		.cm-scroller {
			overflow: auto;
		}
		.cm-content {
			padding-bottom: 4em; /* I prefer having the last line not be at the absolute bottom of my monitor */
		}
	}
	.tab-bar {
		background-color: var(--bg-dark);
		display: flex;
		flex-direction: row;
		align-items: center;
		height: 30px;

		> .tab {
			height: 100%;
			padding: 0 10px;
			user-select: none;

			display: flex;
			align-items: center;
			justify-content: center;

			font-weight: bold;
			background-color: color-mix(in oklch, var(--bg-dark), var(--bg-normal));
			&:hover {
				background-color: color-mix(in oklch, var(--bg-dark), var(--bg-light));
			}
		}
		> .tab.settings {
			margin-left: auto;
			padding: 0 5px;
		}
	}
	#settingsModal {
		display: fixed;
		top: 15px;
		left: 50%;
		transform: translateX(-50%);

		width: calc(600px - 60px);
		padding: 10px;

		color: var(--text);
		background: var(--bg-normal);
		border: none;
		border-radius: 8px;

		&::backdrop {
			background: rgba(0, 0, 0, 0.5);
		}
		> div {
			display: flex;
			flex-direction: column;
			gap: 5px;
		}
	}

	@media screen and (max-width: 800px) {
		#app {
			flex-direction: column;
		}
		#canvasContainer {
			flex-grow: 0;
			flex-shrink: 1;
			flex-basis: 100vw;
			background-position: bottom right;
		}
		#sidebar {
			width: 100%;
			flex-grow: 1;
			flex-shrink: 0;
			min-height: 300px;
		}
	}
</style>

<style is:global>
	@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital@0;1&display=swap');

	:root {
		--bg-dark:   hsl(216, 13%, 15%);
		--bg-normal: hsl(220, 13%, 18%);
		--bg-light:  hsl(220, 13%, 23%);

		--text: hsl(220.01, 13%, 66%);
		--text-muted: hsla(220.01, 13%, 66%, 0.2);
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	html, body {
		width: 100%;
		height: 100%;
		font-family: 'Roboto', sans-serif;
		color: var(--text);
	}
	code, .cm-editor * {
		font-family: "JetBrains Mono", monospace;
  		font-size: 13px;
		line-height: 1.2;
		font-variant-ligatures: normal;
	}

	button {
		all: unset;
		cursor: pointer;
		background: var(--bg-light);
	}
</style>

